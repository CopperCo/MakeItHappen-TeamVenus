{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\duke6am\\\\Desktop\\\\HAYLEY's Project3\\\\MakeItHappen-TeamVenus\\\\src\\\\pages\\\\Calculation.js\";\nimport React, { Component } from 'react'; //import { Link } from 'react-router-dom';\n//import { Col, Row, Container } from '../../components/Grid';\n//import Jumbotron from '../../components/Jumbotron';\n//import API from '../../utils/API';\n//import { List, ListItem } from '../../components/List';\n//import StrategyPicker from '../pages/Strategy';\n\nimport BudgetTable from '../compontents/Table/BudgetTable';\nimport { Col, Row, Container, Button, Form, FormGroup, Jumbotron, Label, Input, ListGroup, ListGroupItem } from 'reactstrap';\n\nvar Calculations =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calculations, _Component);\n\n  function Calculations() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Calculations);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calculations)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      debts: [],\n      currentDebt: {\n        debtname: '',\n        amount: 0,\n        interestrate: 0,\n        compounding: '',\n        minimumpayment: 0,\n        alternateamount: 0\n      },\n      monthsRemaining: 0,\n      totalDebt: 0,\n      totalMinPay: 0\n    };\n\n    _this.handleInputChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n\n      if ( //modify according to object notation\n      !_this.state.currentDebt.debtname || !_this.state.currentDebt.amount || !_this.state.currentDebt.interestrate || !_this.state.currentDebt.compounding || !_this.state.currentDebt.minimumpayment || !_this.state.currentDebt.alternateamount) {\n        alert('Record the details of your debt here');\n      } else {\n        alert('Thank you');\n      } //{\n      // API.saveDebt({\n      //  debtname: this.state.debtname,\n      // amount: this.state.amount,\n      //interestrate: this.state.interestrate,\n      // compounding: this.state.compounding,\n      //  minimumpayment: this.state.minimumpayment,\n      //  alternateamount: this.state.alternateamount\n      //     })\n      //       .then(res => {\n      //         this.loadDebts().then(() => {\n      //           console.log(this.state);\n      //         });\n      //       })\n      //       .catch(err => console.log(err));\n      //   }\n      // };\n\n    };\n\n    _this.handleCalculations = function () {\n      var totalMinPay = 0;\n      var totalDebt = 0;\n      var debtData = [{\n        debtname: 'Car Loan',\n        amount: 12000,\n        interestrate: 7.0,\n        compounding: 'monthly',\n        minimumpayment: 485.0,\n        alternateamount: 210\n      }, {\n        debtname: 'Mortgage',\n        amount: 200000,\n        interestrate: 5.0,\n        compounding: 'monthly',\n        minimumpayment: 584.0,\n        alternateamount: 0\n      }, {\n        debtname: 'Big screen TV',\n        amount: 3000,\n        interestrate: 21.99,\n        compounding: 'monthly',\n        minimumpayment: 249.0,\n        alternateamount: 0\n      }, {\n        debtname: 'Student Loan',\n        amount: 22000,\n        interestrate: 5.0,\n        compounding: 'monthly',\n        minimumpayment: 315.0,\n        alternateamount: 0\n      }, {\n        debtname: 'Snowmobile Loan',\n        amount: 6000,\n        interestrate: 8.0,\n        compounding: 'monthly',\n        minimumpayment: 267.0,\n        alternateamount: 0\n      }];\n\n      for (var i = 0; i < debtData.length; i++) {\n        // get a total of all existing minimum monthly payments\n        totalMinPay += debtData[i].mthlypay; // get the current amount of all total debt owing\n\n        totalDebt += debtData[i].balance;\n      }\n\n      _this.setState({\n        totalDebt: totalDebt,\n        totalMinPay: totalMinPay\n      }); // this returns the total amount of debt and the total of minimum payments\n      // from this we can calculate length of time until debt retired\n      //=========================================================================\n      //this won't work for multiple alternate amounts, whether in state or array\n      //===========================================================================\n\n\n      var monthsRemaining = totalDebt / (totalMinPay + _this.debtData[0].alternateamount); // need to call the handleCalculations function in render to print out results\n      //need to update the amounts of each debt after the minimum monthly payments\n      //  ==================================================================\n      //figure out the logic for monthsRemaining and amount (state)\n      // ================================================================\n      //this.setState({\n      //for (let i = 0; i < debtData.length; i++) {\n      //amount: this.state.amount[i] - this.state.minimumpayment[i],\n      //});\n    };\n\n    return _this;\n  }\n\n  _createClass(Calculations, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Add new Debt\"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.debtname,\n        onChange: this.handleInputChange,\n        name: \"debtname\",\n        placeholder: \"Name of Debt (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(Input, {\n        value: this.state.amount,\n        onChange: this.handleInputChange,\n        name: \"amount\",\n        placeholder: \"Original Amount Owing (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(Input, {\n        value: this.state.interestrate,\n        onChange: this.handleInputChange,\n        name: \"interestrate\",\n        placeholder: \"Interest Rate (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(Input, {\n        value: this.state.compounding,\n        onChange: this.handleInputChange,\n        name: \"compounding\",\n        placeholder: \"Frequency Interest Compounds (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(Input, {\n        value: this.state.minimumpayment,\n        onChange: this.handleInputChange,\n        name: \"minimumpayment\",\n        placeholder: \"Minimum Payment Amount (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(Input, {\n        value: this.state.alternateamount,\n        onChange: this.handleInputChange,\n        name: \"alternateamount\",\n        placeholder: \"One time additional payment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(Button, {\n        disabled: !(this.state.debtname && this.state.amount && this.state.interestrate && this.state.compounding && this.state.minimumpayment && this.state.alternateamount),\n        onClick: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Submit New Debt\"))), React.createElement(Col, {\n        size: \"md-6 sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Current Debts on record\"), React.createElement(BudgetTable, {\n        title: \"Your DEBT\",\n        tableData: this.debtData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"How much longer will I be in debt?\"), React.createElement(Button, {\n        onClick: this.handleCalculations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Get my debt report\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \" You will be in debt for \", this.state.monthsRemaining, \" months.\")));\n    }\n  }]);\n\n  return Calculations;\n}(Component);\n\nexport default Calculations; //         {/* can't create and assign new vars inside render - TODO */}\n// I was assigning a new variable to get a onetime payment to help bring down debt\n// solution was re-name one of the table names in the minimum JSON to cover off the opportunity of the user //making an alternate payment towards debt.\n//======================================================================\n// challenge - how to get value from user selection in Strategy to apply to right debt\n// =====================================================================\n// perhaps for MVP will just let user assign what alternate amount they can apply to whatever debt\n//         {/* {let monthsRemaining = {totalDebt} / { {totalMinPay} + {value} }} */}\n//         <Row>\n//           <h3>\n//             With those monthly payments, you will be out of debt in $\n//             {totalDebt / (totalMinPay + value)} months.\n//           </h3>\n//         </Row>\n//         {/* re-calculation of the debt values for the end of the month*/}\n//         {/* depends on which debt reduction strategy was chosen by the Debt Strategy selection*/}\n//         <div>\n//           <div>\n//             <h1>End of month Debts</h1>\n//           </div>\n//           {this.state.debts.length ? (\n//             <List>\n//               {this.state.debts.map(debt => (\n//                 <ListItem key={debt._id}>\n//                   <Link to={'/debts/' + debt._id}>\n//                     <strong>\n//                       {debt.debtname} with original amount of {debt.amount} at{' '}\n//                       {debt.interestrate} % interest, compounding{' '}\n//                       {debt.compounding} with minimum payment of{' '}\n//                       {debt.minimumpayment} with a current balance remaining of{' '}\n//                       {debt.currentbalance}\n//                     </strong>\n//                   </Link>\n//                 </ListItem>\n//               ))}\n//             </List>\n//           ) : (\n//             <h3>No Results to Display</h3>\n//           )}\n//         </div>\n//       </Container>\n//     );\n//   }\n// }\n// export default Calculations;\n// requires calculation of (this month amount) minus (total of minimum pymts) to determine if there is a surplus?\n// requires calculation for each debt to ensure that the amount paid just pays off the debt without paying too much\n// requires calculation for each debt of (current balance ) minus (this month's payment)\n// requires updating the new amount of each balance outstanding\n// which requires an update function/route back to the database.\n//\n//                  PUT THIS INSIDE A REACT METHOD - TODO\n//\n// testMethod() {\n//   totalMinPay = 0;\n//   totalDebt = 0;\n//   const debt = currentdebt.map(debt => {\n//     // get a total of all existing minimum monthly payments\n//     totalMinPay += debt.minimumpayment;\n//     // get the current amount of all total debt owing\n//     totalDebt += debt.balance;\n//   });\n//   // sort by either amount owing or interest rate to accomodate Snowball, Avalanche or HighInterest\n//   // have to sort by currentdebt.debt.amount to find the highest amount, the lowest amount, and then sort by currentdebt.debt.interest to find the highest interest rate.\n//   let snowballid = 0,\n//   let minamount = 0,\n//   for (i = 0; i < currentdebt.length; i++) {\n//     if (currentdebt.amount[i] < currentdebt.amount[i + 1]) {\n//       minamount = currentdebt.amount[i];\n//       snowballid = currentdebt.id[i];\n//     } else {\n//       minamount = currentdebt.amount[i + 1];\n//       snowballid = currentdebt.id[i + 1];\n//     }\n//     console.log('minamount = ' + minamount);\n//     console.log('snowballid = ' + snowballid);\n//     }\n//     if (currentdebt.amount[i] > currentdebt.amount[i + 1]) {\n//       maxamount = currentdebt.amount[i];\n//       avalancheid = currentdebt.id[i];\n//     } else {\n//       maxamount = currentdebt.amount[i + 1];\n//       avalancheid = currentdebt.id[i + 1];\n//     }\n//     if (currentdebt.interest[i] > currentdebt.interest[i + 1]) {\n//       interestamount = currentdebt.amount[i];\n//       interestid = currentdebt.id[i];\n//     } else {\n//       interestamount = currentdebt.amount[i + 1];\n//       interestid = currentdebt.id[i + 1];\n//     }\n//   }\n//   // minamount = 0;\n//   // avalancheid = 0;\n//   // for (i = 0; i < currentdebt.length; i++) {\n//   //   if (currentdebt.amount[i] < currentdebt.amount[i + 1]) {\n//   //     minamount = currentdebt.amount[i];\n//   //     avalancheid = currentdebt.id[i];\n//   //   } else {\n//   //     minamount = currentdebt.amount[i + 1];\n//   //     avalancheid = currentdebt.id[i + 1];\n//   //   }\n//   // }\n//   // let interestamount = 0;\n//   // let interestid = 0;\n//   // for (i = 0; i < currentdebt.length; i++) {\n//   //   if (currentdebt.interest[i] > currentdebt.interest[i + 1]) {\n//   //     interestamount = currentdebt.amount[i];\n//   //     interestid = currentdebt.id[i];\n//   //   } else {\n//   //     interestamount = currentdebt.amount[i + 1];\n//   //     interestid = currentdebt.id[i + 1];\n//   //   }\n//   // }\n//   // know we know the ID number of which debt would be paid off first, in each of the 3 debt reduction methods. We use this information later to apply money from the additional payment to help pay down debt faster.\n//   if ((this.state.Strategy = 'Snowball')) {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.minimumpayment[i];\n//       currentdebt.balance[snowballid] = currentdebt.balance - value;\n//     }\n//   } else if ((this.state.Strategy = 'Avalanche')) {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.minimumpayment[i];\n//       currentdebt.balance[avalancheid] = currentdebt.balance - value;\n//     }\n//   } else {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.mthlypay[i];\n//       currentdebt.balance[interestid] = currentdebt.balance - value;\n//     }\n//   }\n// }","map":{"version":3,"sources":["C:\\Users\\duke6am\\Desktop\\HAYLEY's Project3\\MakeItHappen-TeamVenus\\src\\pages\\Calculation.js"],"names":["React","Component","BudgetTable","Col","Row","Container","Button","Form","FormGroup","Jumbotron","Label","Input","ListGroup","ListGroupItem","Calculations","state","debts","currentDebt","debtname","amount","interestrate","compounding","minimumpayment","alternateamount","monthsRemaining","totalDebt","totalMinPay","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","alert","handleCalculations","debtData","i","length","mthlypay","balance"],"mappings":"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":["import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\n//import { Col, Row, Container } from '../../components/Grid';\n//import Jumbotron from '../../components/Jumbotron';\n//import API from '../../utils/API';\n//import { List, ListItem } from '../../components/List';\n//import StrategyPicker from '../pages/Strategy';\nimport BudgetTable from '../compontents/Table/BudgetTable';\nimport {\n  Col,\n  Row,\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Jumbotron,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem\n} from 'reactstrap';\n\nclass Calculations extends Component {\n  // need to bring in all existing debts from the database and place in an array\n  // will hard-code data for MVP purposes\n\n  state = {\n    debts: [],\n    currentDebt: {\n      debtname: '',\n      amount: 0,\n      interestrate: 0,\n      compounding: '',\n      minimumpayment: 0,\n      alternateamount: 0\n    },\n    monthsRemaining: 0,\n    totalDebt: 0,\n    totalMinPay: 0\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  //this.state.debts.push(this.state.currentDebt)\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (\n      //modify according to object notation\n      !this.state.currentDebt.debtname ||\n      !this.state.currentDebt.amount ||\n      !this.state.currentDebt.interestrate ||\n      !this.state.currentDebt.compounding ||\n      !this.state.currentDebt.minimumpayment ||\n      !this.state.currentDebt.alternateamount\n    ) {\n      alert('Record the details of your debt here');\n    } else {\n      alert('Thank you');\n    }\n\n    //{\n    // API.saveDebt({\n    //  debtname: this.state.debtname,\n    // amount: this.state.amount,\n    //interestrate: this.state.interestrate,\n    // compounding: this.state.compounding,\n    //  minimumpayment: this.state.minimumpayment,\n    //  alternateamount: this.state.alternateamount\n    //     })\n    //       .then(res => {\n    //         this.loadDebts().then(() => {\n    //           console.log(this.state);\n    //         });\n    //       })\n    //       .catch(err => console.log(err));\n    //   }\n    // };\n  };\n\n  handleCalculations = () => {\n    let totalMinPay = 0;\n    let totalDebt = 0;\n\n    let debtData = [\n      {\n        debtname: 'Car Loan',\n        amount: 12000,\n        interestrate: 7.0,\n        compounding: 'monthly',\n        minimumpayment: 485.0,\n        alternateamount: 210\n      },\n      {\n        debtname: 'Mortgage',\n        amount: 200000,\n        interestrate: 5.0,\n        compounding: 'monthly',\n        minimumpayment: 584.0,\n        alternateamount: 0\n      },\n      {\n        debtname: 'Big screen TV',\n        amount: 3000,\n        interestrate: 21.99,\n        compounding: 'monthly',\n        minimumpayment: 249.0,\n        alternateamount: 0\n      },\n      {\n        debtname: 'Student Loan',\n        amount: 22000,\n        interestrate: 5.0,\n        compounding: 'monthly',\n        minimumpayment: 315.0,\n        alternateamount: 0\n      },\n      {\n        debtname: 'Snowmobile Loan',\n        amount: 6000,\n        interestrate: 8.0,\n        compounding: 'monthly',\n        minimumpayment: 267.0,\n        alternateamount: 0\n      }\n    ];\n\n    for (let i = 0; i < debtData.length; i++) {\n      // get a total of all existing minimum monthly payments\n      totalMinPay += debtData[i].mthlypay;\n\n      // get the current amount of all total debt owing\n      totalDebt += debtData[i].balance;\n    }\n\n    this.setState({\n      totalDebt: totalDebt,\n      totalMinPay: totalMinPay\n    });\n    // this returns the total amount of debt and the total of minimum payments\n    // from this we can calculate length of time until debt retired\n\n    //=========================================================================\n    //this won't work for multiple alternate amounts, whether in state or array\n    //===========================================================================\n\n    let monthsRemaining =\n      totalDebt / (totalMinPay + this.debtData[0].alternateamount);\n\n    // need to call the handleCalculations function in render to print out results\n\n    //need to update the amounts of each debt after the minimum monthly payments\n\n    //  ==================================================================\n    //figure out the logic for monthsRemaining and amount (state)\n    // ================================================================\n\n    //this.setState({\n    //for (let i = 0; i < debtData.length; i++) {\n    //amount: this.state.amount[i] - this.state.minimumpayment[i],\n    //});\n  };\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-6\">\n            <h1>Add new Debt</h1>\n            <Form>\n              <Input\n                value={this.state.debtname}\n                onChange={this.handleInputChange}\n                name=\"debtname\"\n                placeholder=\"Name of Debt (required)\"\n              />\n              <Input\n                value={this.state.amount}\n                onChange={this.handleInputChange}\n                name=\"amount\"\n                placeholder=\"Original Amount Owing (required)\"\n              />\n              <Input\n                value={this.state.interestrate}\n                onChange={this.handleInputChange}\n                name=\"interestrate\"\n                placeholder=\"Interest Rate (required)\"\n              />\n              <Input\n                value={this.state.compounding}\n                onChange={this.handleInputChange}\n                name=\"compounding\"\n                placeholder=\"Frequency Interest Compounds (required)\"\n              />\n              <Input\n                value={this.state.minimumpayment}\n                onChange={this.handleInputChange}\n                name=\"minimumpayment\"\n                placeholder=\"Minimum Payment Amount (required)\"\n              />\n              <Input\n                value={this.state.alternateamount}\n                onChange={this.handleInputChange}\n                name=\"alternateamount\"\n                placeholder=\"One time additional payment\"\n              />\n              <Button\n                disabled={\n                  !(\n                    this.state.debtname &&\n                    this.state.amount &&\n                    this.state.interestrate &&\n                    this.state.compounding &&\n                    this.state.minimumpayment &&\n                    this.state.alternateamount\n                  )\n                }\n                onClick={this.handleFormSubmit}\n              >\n                Submit New Debt\n              </Button>\n            </Form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <h1>Current Debts on record</h1>\n            {/* {this.state.debts.length ? (\n              <ListGroup>\n                {this.state.debts.map(debt => (\n                  <ListGroupItem key={debt._id}>\n                    <Link to={'/debts/' + debt._id}>\n                      <strong>\n                        {debt.debtname} with original amount of {debt.amount} at{' '}\n                        {debt.interestrate} % interest, compounding{' '}\n                        {debt.compounding} with minimum payment of{' '}\n                        {debt.minimumpayment} with a current balance remaining\n                        with an additional amount available of {debt.alternateamount}\n                      </strong>\n                    </Link>\n                  </ListGroupItem>\n                ))}\n              </ListGroup>\n            ) : (\n              <h3>No Results to Display</h3>\n            )} */}\n            <BudgetTable title=\"Your DEBT\" tableData={this.debtData} />\n          </Col>\n        </Row>\n        <Row>\n          <h1>How much longer will I be in debt?</h1>\n          <Button onClick={this.handleCalculations}>Get my debt report</Button>\n          <h3> You will be in debt for {this.state.monthsRemaining} months.</h3>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Calculations;\n\n//         {/* can't create and assign new vars inside render - TODO */}\n\n// I was assigning a new variable to get a onetime payment to help bring down debt\n// solution was re-name one of the table names in the minimum JSON to cover off the opportunity of the user //making an alternate payment towards debt.\n\n//======================================================================\n// challenge - how to get value from user selection in Strategy to apply to right debt\n// =====================================================================\n\n// perhaps for MVP will just let user assign what alternate amount they can apply to whatever debt\n\n//         {/* {let monthsRemaining = {totalDebt} / { {totalMinPay} + {value} }} */}\n//         <Row>\n//           <h3>\n//             With those monthly payments, you will be out of debt in $\n//             {totalDebt / (totalMinPay + value)} months.\n//           </h3>\n//         </Row>\n//         {/* re-calculation of the debt values for the end of the month*/}\n//         {/* depends on which debt reduction strategy was chosen by the Debt Strategy selection*/}\n//         <div>\n//           <div>\n//             <h1>End of month Debts</h1>\n//           </div>\n//           {this.state.debts.length ? (\n//             <List>\n//               {this.state.debts.map(debt => (\n//                 <ListItem key={debt._id}>\n//                   <Link to={'/debts/' + debt._id}>\n//                     <strong>\n//                       {debt.debtname} with original amount of {debt.amount} at{' '}\n//                       {debt.interestrate} % interest, compounding{' '}\n//                       {debt.compounding} with minimum payment of{' '}\n//                       {debt.minimumpayment} with a current balance remaining of{' '}\n//                       {debt.currentbalance}\n//                     </strong>\n//                   </Link>\n//                 </ListItem>\n//               ))}\n//             </List>\n//           ) : (\n//             <h3>No Results to Display</h3>\n//           )}\n//         </div>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default Calculations;\n\n// requires calculation of (this month amount) minus (total of minimum pymts) to determine if there is a surplus?\n// requires calculation for each debt to ensure that the amount paid just pays off the debt without paying too much\n// requires calculation for each debt of (current balance ) minus (this month's payment)\n// requires updating the new amount of each balance outstanding\n// which requires an update function/route back to the database.\n\n//\n//                  PUT THIS INSIDE A REACT METHOD - TODO\n//\n\n// testMethod() {\n//   totalMinPay = 0;\n//   totalDebt = 0;\n//   const debt = currentdebt.map(debt => {\n//     // get a total of all existing minimum monthly payments\n//     totalMinPay += debt.minimumpayment;\n//     // get the current amount of all total debt owing\n//     totalDebt += debt.balance;\n//   });\n//   // sort by either amount owing or interest rate to accomodate Snowball, Avalanche or HighInterest\n//   // have to sort by currentdebt.debt.amount to find the highest amount, the lowest amount, and then sort by currentdebt.debt.interest to find the highest interest rate.\n\n//   let snowballid = 0,\n//   let minamount = 0,\n//   for (i = 0; i < currentdebt.length; i++) {\n//     if (currentdebt.amount[i] < currentdebt.amount[i + 1]) {\n//       minamount = currentdebt.amount[i];\n//       snowballid = currentdebt.id[i];\n//     } else {\n//       minamount = currentdebt.amount[i + 1];\n//       snowballid = currentdebt.id[i + 1];\n//     }\n//     console.log('minamount = ' + minamount);\n//     console.log('snowballid = ' + snowballid);\n//     }\n\n//     if (currentdebt.amount[i] > currentdebt.amount[i + 1]) {\n//       maxamount = currentdebt.amount[i];\n//       avalancheid = currentdebt.id[i];\n//     } else {\n//       maxamount = currentdebt.amount[i + 1];\n//       avalancheid = currentdebt.id[i + 1];\n//     }\n\n//     if (currentdebt.interest[i] > currentdebt.interest[i + 1]) {\n//       interestamount = currentdebt.amount[i];\n//       interestid = currentdebt.id[i];\n//     } else {\n//       interestamount = currentdebt.amount[i + 1];\n//       interestid = currentdebt.id[i + 1];\n//     }\n//   }\n\n//   // minamount = 0;\n//   // avalancheid = 0;\n//   // for (i = 0; i < currentdebt.length; i++) {\n//   //   if (currentdebt.amount[i] < currentdebt.amount[i + 1]) {\n//   //     minamount = currentdebt.amount[i];\n//   //     avalancheid = currentdebt.id[i];\n//   //   } else {\n//   //     minamount = currentdebt.amount[i + 1];\n//   //     avalancheid = currentdebt.id[i + 1];\n//   //   }\n//   // }\n\n//   // let interestamount = 0;\n//   // let interestid = 0;\n//   // for (i = 0; i < currentdebt.length; i++) {\n//   //   if (currentdebt.interest[i] > currentdebt.interest[i + 1]) {\n//   //     interestamount = currentdebt.amount[i];\n//   //     interestid = currentdebt.id[i];\n//   //   } else {\n//   //     interestamount = currentdebt.amount[i + 1];\n//   //     interestid = currentdebt.id[i + 1];\n//   //   }\n//   // }\n\n//   // know we know the ID number of which debt would be paid off first, in each of the 3 debt reduction methods. We use this information later to apply money from the additional payment to help pay down debt faster.\n\n//   if ((this.state.Strategy = 'Snowball')) {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.minimumpayment[i];\n//       currentdebt.balance[snowballid] = currentdebt.balance - value;\n//     }\n//   } else if ((this.state.Strategy = 'Avalanche')) {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.minimumpayment[i];\n//       currentdebt.balance[avalancheid] = currentdebt.balance - value;\n//     }\n//   } else {\n//     for (i = 0; i < currentdebt.length; i++) {\n//       currentdebt.balance[i] =\n//         currentdebt.balance[i] - currentdebt.mthlypay[i];\n//       currentdebt.balance[interestid] = currentdebt.balance - value;\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}